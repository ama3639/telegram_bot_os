version: '3.8'

services:
  telegram_bot:
    build:
      context: ../../
      dockerfile: ./deployment/docker/Dockerfile
    container_name: telegram_bot
    restart: unless-stopped
    env_file: ../../.env
    volumes:
      - ../../data:/app/data
      - ../../logs:/app/logs
      - ../../cache:/app/cache
    networks:
      - bot_network
    depends_on:
      - redis

  redis:
    image: redis:alpine
    container_name: telegram_bot_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - bot_network

  api:
    build:
      context: ../../
      dockerfile: ./deployment/docker/Dockerfile
    container_name: telegram_bot_api
    restart: unless-stopped
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000
    env_file: ../../.env
    environment:
      - API_MODE=True
    ports:
      - "8000:8000"
    volumes:
      - ../../data:/app/data
      - ../../logs:/app/logs
      - ../../cache:/app/cache
    networks:
      - bot_network
    depends_on:
      - redis
      - telegram_bot

  backup:
    build:
      context: ../../
      dockerfile: ./deployment/docker/Dockerfile
    container_name: telegram_bot_backup
    restart: unless-stopped
    command: python -m tools.maintenance.backup --daily
    env_file: ../../.env
    volumes:
      - ../../data:/app/data
      - ../../logs:/app/logs
    networks:
      - bot_network
    depends_on:
      - telegram_bot
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

networks:
  bot_network:
    driver: bridge

volumes:
  redis_data: